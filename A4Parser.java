
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 25 15:01:41 EDT 2021
//----------------------------------------------------

import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Mar 25 15:01:41 EDT 2021
  */
public class A4Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A4Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A4Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\032\003\000\002\003" +
    "\003\000\002\003\004\000\002\030\003\000\002\030\005" +
    "\000\002\027\003\000\002\027\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\004\010\000\002" +
    "\004\011\000\002\006\003\000\002\006\005\000\002\006" +
    "\002\000\002\007\004\000\002\031\003\000\002\031\004" +
    "\000\002\010\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\005\000\002\012" +
    "\004\000\002\013\006\000\002\013\006\000\002\014\005" +
    "\000\002\015\007\000\002\015\011\000\002\016\011\000" +
    "\002\017\011\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\005\000\002\022\006\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\024\003\000\002\023" +
    "\005\000\002\023\003\000\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\010\005\004\006\005\007\012\001\002\000" +
    "\006\004\ufff9\014\ufff9\001\002\000\006\004\ufff7\014\ufff7" +
    "\001\002\000\006\004\016\014\015\001\002\000\012\002" +
    "\uffff\005\uffff\006\uffff\007\uffff\001\002\000\004\002\014" +
    "\001\002\000\012\002\000\005\004\006\005\007\012\001" +
    "\002\000\006\004\ufff8\014\ufff8\001\002\000\012\002\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\001\002\000\004\002\001\001" +
    "\002\000\004\004\153\001\002\000\004\012\017\001\002" +
    "\000\014\005\004\006\005\007\012\013\ufff2\021\ufff2\001" +
    "\002\000\006\013\ufff4\021\ufff4\001\002\000\004\004\152" +
    "\001\002\000\006\013\024\021\023\001\002\000\010\005" +
    "\004\006\005\007\012\001\002\000\004\010\025\001\002" +
    "\000\024\004\036\005\004\006\005\007\012\010\025\015" +
    "\035\016\037\017\027\020\042\001\002\000\012\002\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\001\002\000\004\012\143\001" +
    "\002\000\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\001\002\000" +
    "\030\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\034\uffe8\001\002\000" +
    "\004\004\140\001\002\000\030\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\034\uffec\001\002\000\026\004\036\005\004\006\005" +
    "\007\012\010\025\011\137\015\035\016\037\017\027\020" +
    "\042\001\002\000\010\004\052\012\054\035\056\001\002" +
    "\000\004\023\127\001\002\000\004\012\112\001\002\000" +
    "\030\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\034\uffe7\001\002\000" +
    "\030\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\034\uffed\001\002\000" +
    "\004\012\046\001\002\000\030\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\034\uffea\001\002\000\030\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\034\uffe9\001\002\000\030\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\034\uffeb\001\002\000\010\004\052\012\054\035\056" +
    "\001\002\000\024\013\uffd7\021\uffd7\022\uffd7\026\063\027" +
    "\062\030\066\031\067\032\uffd7\033\uffd7\001\002\000\024" +
    "\013\uffd4\021\uffd4\022\uffd4\026\uffd4\027\uffd4\030\066\031" +
    "\067\032\uffd4\033\uffd4\001\002\000\024\013\uffd3\021\uffd3" +
    "\022\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\001\002\000\026\012\100\013\uffd2\021\uffd2\022\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\001" +
    "\002\000\026\013\ufffd\021\ufffd\022\ufffd\025\076\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\001\002\000" +
    "\010\004\052\012\054\035\056\001\002\000\010\021\060" +
    "\026\063\027\062\001\002\000\030\013\ufffb\021\ufffb\022" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\035\056\001\002\000\026\013\ufffa\021\ufffa\022" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\001\002\000\004\024\071\001\002\000\010\004" +
    "\052\012\054\035\056\001\002\000\010\004\uffdd\012\uffdd" +
    "\035\uffdd\001\002\000\010\004\uffdc\012\uffdc\035\uffdc\001" +
    "\002\000\024\013\uffd8\021\uffd8\022\uffd8\026\uffd8\027\uffd8" +
    "\030\066\031\067\032\uffd8\033\uffd8\001\002\000\010\004" +
    "\052\012\054\035\056\001\002\000\010\004\uffda\012\uffda" +
    "\035\uffda\001\002\000\010\004\uffdb\012\uffdb\035\uffdb\001" +
    "\002\000\024\013\uffd5\021\uffd5\022\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\001\002\000\004\013" +
    "\072\001\002\000\004\022\073\001\002\000\030\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\034\uffdf\001\002\000\010\013\075" +
    "\026\063\027\062\001\002\000\024\013\uffd1\021\uffd1\022" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\001\002\000\004\035\056\001\002\000\024\013\ufffc\021" +
    "\ufffc\022\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\001\002\000\014\004\052\012\054\013\uffc9\021" +
    "\uffc9\035\056\001\002\000\012\013\uffca\021\uffca\026\063" +
    "\027\062\001\002\000\006\013\104\021\103\001\002\000" +
    "\010\004\052\012\054\035\056\001\002\000\024\013\uffd0" +
    "\021\uffd0\022\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\001\002\000\012\013\uffcb\021\uffcb\026\063" +
    "\027\062\001\002\000\010\004\052\012\054\035\056\001" +
    "\002\000\024\013\uffd6\021\uffd6\022\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\001\002\000\010\004" +
    "\052\012\054\035\056\001\002\000\024\013\uffd9\021\uffd9" +
    "\022\uffd9\026\uffd9\027\uffd9\030\066\031\067\032\uffd9\033" +
    "\uffd9\001\002\000\014\004\052\012\054\035\056\036\115" +
    "\037\113\001\002\000\004\013\uffcd\001\002\000\004\013" +
    "\123\001\002\000\004\013\uffcc\001\002\000\012\026\063" +
    "\027\062\032\117\033\120\001\002\000\010\004\052\012" +
    "\054\035\056\001\002\000\010\004\052\012\054\035\056" +
    "\001\002\000\010\013\uffce\026\063\027\062\001\002\000" +
    "\010\013\uffcf\026\063\027\062\001\002\000\024\004\036" +
    "\005\004\006\005\007\012\010\025\015\035\016\037\017" +
    "\027\020\042\001\002\000\030\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\034\125\001\002\000\024\004\036\005\004\006\005" +
    "\007\012\010\025\015\035\016\037\017\027\020\042\001" +
    "\002\000\030\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\034\uffe0\001" +
    "\002\000\012\004\052\012\054\024\130\035\056\001\002" +
    "\000\004\022\133\001\002\000\010\022\132\026\063\027" +
    "\062\001\002\000\030\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\034" +
    "\uffe4\001\002\000\030\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\034" +
    "\uffe3\001\002\000\010\022\135\026\063\027\062\001\002" +
    "\000\030\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\034\uffe2\001\002" +
    "\000\026\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\001\002\000\032" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\034\uffee\001\002" +
    "\000\006\022\142\023\127\001\002\000\030\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\034\uffe5\001\002\000\030\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\034\uffe6\001\002\000\004\004\144\001" +
    "\002\000\004\021\145\001\002\000\004\024\146\001\002" +
    "\000\004\013\147\001\002\000\004\022\150\001\002\000" +
    "\030\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\034\uffde\001\002\000" +
    "\006\013\ufff3\021\ufff3\001\002\000\006\013\ufff1\021\ufff1" +
    "\001\002\000\004\012\154\001\002\000\014\005\004\006" +
    "\005\007\012\013\ufff2\021\ufff2\001\002\000\006\013\156" +
    "\021\023\001\002\000\004\010\025\001\002\000\012\002" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\012\003\010\004\006\005\005\032\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\012\005" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\020\006\021\007\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\020\007\150\001" +
    "\001\000\004\010\025\001\001\000\026\005\031\010\040" +
    "\011\027\012\032\013\044\014\042\015\043\016\030\017" +
    "\037\031\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\140\001" +
    "\001\000\002\001\001\000\024\005\031\010\040\011\135" +
    "\012\032\013\044\014\042\015\043\016\030\017\037\001" +
    "\001\000\014\020\133\021\046\022\047\027\052\030\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\054\021" +
    "\046\022\047\027\052\030\050\001\001\000\006\025\107" +
    "\026\064\001\001\000\004\026\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\073" +
    "\021\046\022\047\027\052\030\050\001\001\000\004\025" +
    "\060\001\001\000\004\027\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\063\022\047\027\052\030" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\064\001\001\000\010\022\067\027\052\030\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\060\001\001\000\002\001\001\000\004\027\076" +
    "\001\001\000\002\001\001\000\016\020\100\021\046\022" +
    "\047\023\101\027\052\030\050\001\001\000\004\025\060" +
    "\001\001\000\002\001\001\000\014\020\104\021\046\022" +
    "\047\027\052\030\050\001\001\000\002\001\001\000\004" +
    "\025\060\001\001\000\010\022\106\027\052\030\050\001" +
    "\001\000\002\001\001\000\012\021\110\022\047\027\052" +
    "\030\050\001\001\000\004\026\064\001\001\000\016\020" +
    "\115\021\046\022\047\024\113\027\052\030\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\060\001\001\000\014\020\121\021\046\022\047" +
    "\027\052\030\050\001\001\000\014\020\120\021\046\022" +
    "\047\027\052\030\050\001\001\000\004\025\060\001\001" +
    "\000\004\025\060\001\001\000\024\005\031\010\040\011" +
    "\123\012\032\013\044\014\042\015\043\016\030\017\037" +
    "\001\001\000\002\001\001\000\024\005\031\010\040\011" +
    "\125\012\032\013\044\014\042\015\043\016\030\017\037" +
    "\001\001\000\002\001\001\000\014\020\130\021\046\022" +
    "\047\027\052\030\050\001\001\000\002\001\001\000\004" +
    "\025\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\020\006\154\007\017\001\001\000\002\001" +
    "\001\000\004\010\156\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A4Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A4Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A4Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A4Parser$actions {
  private final A4Parser parser;

  /** Constructor */
  CUP$A4Parser$actions(A4Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A4Parser$do_action(
    int                        CUP$A4Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4Parser$parser,
    java.util.Stack            CUP$A4Parser$stack,
    int                        CUP$A4Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A4Parser$result;

      /* select the action based on the action number */
      switch (CUP$A4Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // actualparams ::= 
            {
              String RESULT = null;
		RESULT = " ";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*actualparams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // actualparams ::= expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*actualparams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // actualparams ::= actualparams COMMA expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + ", " + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*actualparams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolexpression ::= FALSE 
            {
              String RESULT = null;
		RESULT = "false";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*boolexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // boolexpression ::= TRUE 
            {
              String RESULT = null;
		RESULT = "true";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*boolexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolexpression ::= expression NOTEQUALS expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + "!=" + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*boolexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolexpression ::= expression EQUALS expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + "==" + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*boolexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryexpression ::= IDENTIFIER LPAREN actualparams RPAREN 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = e1 + "(" + e2 + ")" ;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*primaryexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryexpression ::= LPAREN expression RPAREN 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = "(" + e1 + ")";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*primaryexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryexpression ::= IDENTIFIER 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*primaryexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primaryexpression ::= number 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*primaryexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // multexpression ::= primaryexpression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*multexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // multexpression ::= multexpression timediv primaryexpression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + e2 + e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*multexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // multexpression ::= primaryexpression timediv primaryexpression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + " " + e2 + " " + e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*multexpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= multexpression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression addsub multexpression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + " " + e2 + " " + e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= multexpression addsub multexpression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + " " + e2 + " " + e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // timediv ::= DIVIDE 
            {
              String RESULT = null;
		RESULT = "/";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*timediv*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // timediv ::= TIMES 
            {
              String RESULT = null;
		RESULT = "*";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*timediv*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // addsub ::= MINUS 
            {
              String RESULT = null;
		RESULT = "-";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*addsub*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // addsub ::= PLUS 
            {
              String RESULT = null;
		RESULT = "+";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*addsub*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // readstatement ::= READ LPAREN IDENTIFIER COMMA QSTRING RPAREN SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		RESULT = "br = new BufferedReader(new FileReader(" + e2 + "));\n" +
                e1 + " = Integer.valueOf(br.readLine());\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(13/*readstatement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // writestatement ::= WRITE LPAREN expression COMMA QSTRING RPAREN SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		RESULT = "bw = new BufferedWriter(new FileWriter(" + e2 + "));\n" +
                 "bw.write(\"\" + (" + e1 +"));\n" +
                 "bw.close();\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*writestatement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifstatement ::= IF LPAREN boolexpression RPAREN statement ELSE statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "if" + "(" + e1 + ")\n{\n" + e2 + "}"
                 + "else{\n"
                 + e3
                 +"\n}";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(11/*ifstatement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ifstatement ::= IF LPAREN boolexpression RPAREN statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "if" + "(" + e1 + ")\n{" + e2 + "}\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(11/*ifstatement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // returnstatement ::= RETURN expression SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT =
                    "return "
                    + e1
                    + ";";
                    
              CUP$A4Parser$result = new java_cup.runtime.Symbol(10/*returnstatement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignstatement ::= IDENTIFIER ASSIGN QSTRING SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT =
                    e1
                    + " = "
                    + e2
                    + ";\n" ;
                    
              CUP$A4Parser$result = new java_cup.runtime.Symbol(9/*assignstatement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignstatement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT =
                      e1
                     +" = "
                     +e2
                     +";\n";
                    
              CUP$A4Parser$result = new java_cup.runtime.Symbol(9/*assignstatement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localvar ::= type assignstatement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(8/*localvar*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localvar ::= type IDENTIFIER SEMICOLON 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = e1 + " " + e2 + ";\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(8/*localvar*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= readstatement 
            {
              String RESULT = null;
		int e7left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e7;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= writestatement 
            {
              String RESULT = null;
		int e6left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e6 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e6;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= ifstatement 
            {
              String RESULT = null;
		int e5left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e5;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= returnstatement 
            {
              String RESULT = null;
		int e4left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e4;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= assignstatement 
            {
              String RESULT = null;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e3;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= localvar 
            {
              String RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= block 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= BEGIN state END 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(6/*block*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // state ::= state statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*state*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // state ::= statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*state*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= type IDENTIFIER 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + " " +e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*formal*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalparams ::= 
            {
              String RESULT = null;
		RESULT = " ";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*formalparams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalparams ::= formalparams COMMA formal 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + ", " +e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*formalparams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalparams ::= formal 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*formalparams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func ::= type MAIN IDENTIFIER LPAREN formalparams RPAREN block 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT =
         "public static void main "
         + "("
         + "String[] args"
         +") throws IOException {\n"
         + b1
         + "\n}\n";
         
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*func*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func ::= type IDENTIFIER LPAREN formalparams RPAREN block 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT =
          "static "
          + t
          + " "
          + i
          + "("
          + f
          + ") throws IOException{\n"
          + b
          + "\n}\n";
          
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*func*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= REAL 
            {
              String RESULT = null;
		RESULT = "double";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= INT 
            {
              String RESULT = null;
		RESULT = "int";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= STRING 
            {
              String RESULT = null;
		RESULT = "String";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // digits ::= DIGIT digits 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*digits*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // digits ::= DIGIT 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*digits*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // number ::= digits FSTOP digits 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + "." + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*number*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // number ::= digits 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*number*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= prog func 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1 + e2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= func 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog2 ::= prog 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = "import java.io.*; \n\npublic class A4 {\nstatic BufferedReader br;\nstatic BufferedWriter bw;\n" + e + "\n}"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*prog2*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog2 EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = start_val;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A4Parser$parser.done_parsing();
          return CUP$A4Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

